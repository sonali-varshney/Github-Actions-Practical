name: caching
on: workflow_dispatch
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: get code
        uses: actions/Checkout@v3
      - name: add caching
        uses: actions/cache@v3      #caching k liye ye action use krte h.. it take some input
        with:
          path: ~/.npm
          key: anyname-${{ hashFiles('**/package-lock.json') }}

      - name: install dependencies
        run: npm ci
  build:
    runs-on: ubuntu-latest
    steps:
      - name: get code
        uses: actions/Checkout@v3
      - name: add caching
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: anyname-${{ hashFiles('**/package-lock.json') }}
      - name: install dependencies
        run: npm ci


#(see line 9) Now to add caching,we must add a new step for caching just before the step that has dependency installation step.

# (see line 12) path: specify a path or multiple paths that point at the files and folders that should be cached.Now here in this case on this Linux runner ,for the node dependencies that we are installing here it's this path(~/.npm) that should be cached.This is the path used by this npm tool for its internal dependency cache, which we now wanna store with help of the cache action across jobs and across workflows

#(see line 12) Different project setups and different packages and programming languages have different files and folders that should be cached to speed up your workflows. That's why you have all these official documentation(https://github.com/actions/cache/blob/main/examples.md#node---npm)

#(see line 13) key: key will be used for retrieving the cache in the future and recreating that folder on the runner machine based on that cache managed by GitHub in the future. But the key also indicates whether the cache should be discarded because it must be recreated because, for example, some dependency changed. Therefore, you wanna give this cache a name that's not fully static and hard coded but that contains some dynamic element that can change and that will change whenever the cache should be discarded.Hence here we can again include a GitHub Actions expression.here I'll use another function provided by GitHub Actions, the hash files function which simply produces a unique hash value based on a file path we pass to it and that hash value will change whenever the file we pass to it changes. So the contents of the file change.And here we pass that file path between single quotes. And the path here is package dot lock dot Jason,no matter where it is located,so, no matter in which sub folder it might be,actually this collects all package lock Jason files and builds a hash on the combination of all these files.Now, package lock.JSON simply is this file that specifies all the dependencies of this project and the exact versions of these dependencies.And the idea here is that whenever this file changes.because we updated a dependency, for example,the hash that will be produced by hash files will not be the same as before. And therefore we end up with a different hash key indicating to GitHub Actions and this cache action that the currently stored cache should be discarded and not be used, and therefore instead we would reinstall the dependencies.That's how this works.

#(see line 15) Now, of course, install dependencies will always execute, this step won't be skipped but since we either reinstate this npm cache folder or not,the npm ci command will automatically use this npm folder here.If it exists, it will be used.If it doesn't exist, dependencies will be re-downloaded.

#(see line 23) we must repeat this step here in all the jobs that do install dependencies because with that, we're managing the cache for our dependencies in this job.Build job me bhi hm dependencies install kr rheh so same action,path,key hm us job me bhi use krenge .And what's important is that the cache action actually uses one central cache. So if we put our dependencies into the cache in the test job already the build job will use that same cache.So it's not managing different job specific caches but one central cache which is also available across Workflow executions.So if dependencies were cached in one job there will be available in other jobs and other Workflow execution cycles. And with that done, we added caching. And now if we push those changes what you'll see now it will still install the dependencies in the first job because we haven't cached them before. But the build job should then already use those dependencies. And if we would then run the Workflow again thereafter even the test job should use the dependencies in the future as long as no dependency changed.